#include <iostream>
using namespace std;

#define N 9

// Function to print the grid
void printGrid(int grid[N][N]) {
for (int i = 0; i < N; i++) {
for (int j = 0; j < N; j++) {
cout << grid[i][j] << " ";
}
cout << endl;
}
}

// Check if a number is safe to place
bool isSafe(int grid[N][N], int row, int col, int num) {
for (int x = 0; x < N; x++) {
if (grid[row][x] == num || grid[x][col] == num ||
grid[row - row % 3 + x / 3][col - col % 3 + x % 3] == num) {
return false;
}
}
return true;
}

// Solve the Sudoku
bool solve(int grid[N][N]) {
for (int i = 0; i < N; i++) {
for (int j = 0; j < N; j++) {
if (grid[i][j] == 0) {
for (int num = 1; num <= 9; num++) {
if (isSafe(grid, i, j, num)) {
grid[i][j] = num;
if (solve(grid)) return true;
grid[i][j] = 0; // Backtrack
}
}
return false;
}
}
}
return true;
}

int main() {
int grid[N][N] = {
{5, 3, 0, 0, 7, 0, 0, 0, 0},
{6, 0, 0, 1, 9, 5, 0, 0, 0},
{0, 9, 8, 0, 0, 0, 0, 6, 0},
{8, 0, 0, 0, 6, 0, 0, 0, 3},
{4, 0, 0, 8, 0, 3, 0, 0, 1},
{7, 0, 0, 0, 2, 0, 0, 0, 6},
{0, 6, 0, 0, 0, 0, 2, 8, 0},
{0, 0, 0, 4, 1, 9, 0, 0, 5},
{0, 0, 0, 0, 8, 0, 0, 7, 9}
};

if (solve(grid)) {
printGrid(grid);
} else {
cout << "No solution exists!" << endl;
}

return 0;
}